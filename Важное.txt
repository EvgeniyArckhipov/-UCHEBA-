Активация виртуальной версии с определенным интерпритатором, именно с тем, который находиться в папке с этим проетом. 
Это пишется в командной строке Pycharm (не в Local):
C:\Users\pc\PycharmProjects\pythonProject2VVV> venv\Scripts\activate
Статья
https://medium.com/@ph1l74/python-venv-%D0%BD%D0%B0-windows-10-2118ad685b1




ВАЖНО: МЕТОД- ОН ОБРАЩАЕТСЯ К САМОМУ ОБЪЕКТУ (ЧЕРЕЗ ТОЧКУ), ВКЛЮЧАЯ (ЗАСТАВЛЯЯ ДЕЛАТЬ) ОДНУ ИЗ ЕГО ФУНКЦИЙ. МЕТОДЫ НИЧЕГО НЕ ВОЗВРАЩАЮТ!!!
ФУНКЦИЯ - В НЕЕ МЫ ПОМЕЩАЕМ САМ ОБЪЕКТ И С НИМ ЧТО-ТО ДЕЛАЕМ.



Типы данных:
________списки______
my_list = list() #первый способ создания пустого списка
my_list1 = [] #второй способ создания пустого списка

range_list = list(range(-1, 3)) #range-создает список в указанном диапозоне цифр

[-1, 0, 1, 2]

____Последовательность____
Основные возможности – это проверка принадлежности (т.е. выражения “in” и “not in”)
и оператор индексирования, позволяющий получить напрямую некоторый элемент последовательности.
spisok
['лебедь', 'рак', 'щука']

print(spisok[2]) # так мы обратились к третьему элементу списка
щука

spisok[1] = 'форель' # 3аменили второй элемент списка. 
print(spisok) # В отличие от строк нам не нужно перезаписывать весь объект, мы можем поменять часть списка
['лебедь', 'форель', 'щука']

'щука' in spisok
True

Срезы
vowels = ['а', 'е', 'ё', 'и', 'о', 'у', 'ы', 'э', 'ю', 'я']
print(vowels[0:3])
print(vowels[5:])
print(vowels[4::2])
print(vowels[:5])

['а', 'е', 'ё']
['у', 'ы', 'э', 'ю', 'я']
['о', 'ы', 'ю']
['а', 'е', 'ё', 'и', 'о']

3.4 Операции со списками
______Метод append(). Он добавляет элемент справа (что делает эту операцию достаточно быстрой,
в отличие от добавления элемента, например, с левого края). МЫ ДОБАВЛЯЕМ К СПИСКУ ЕЩЕ ЭЛЕМЕНТ В ВИДЕ СПИСКА ["Красноярский край", "Саратовская область", "Якутия", ["Республика Крым", "Калининградская область"]]

spisok = ['лебедь', 'рак', 'форель']
spisok.append('щука') 
spisok

['лебедь', 'рак', 'форель', 'щука']

______метод extend()(РАСШИРЯЕМ ОДИН СПИСОК ДРУГИМ СПИСКОМ):
a = ["Красноярский край", "Саратовская область", "Якутия"]
b = ["Республика Крым", "Калининградская область"]
a.extend(b)
print(a)

['Красноярский край', 'Саратовская область', 'Якутия', 'Республика Крым', 'Калининградская область']


_______метод revome(), который принимает в качестве аргумента элемент, который мы хотим удалить.
spisok = ['лебедь', 'рак', 'форель', 'лебедь']
spisok.remove('лебедь')
spisok


['рак', 'форель', 'лебедь']

________Для удаления элементов по индексу используется метод pop():
languages = ['Java', 'C', 'Python', 'C++', 'Visual Basic.NET']
languages.pop(3)
#print(pop_item)
print(languages)

['Java', 'C', 'Python', 'Visual Basic.NET']


______Отсортируем наш список с помощью метода sort(). 
Параметр reverse обозначает сортировку по убыванию (в порядке, обратному алфавитному)
spisok.sort(reverse=False)
spisok

['лебедь', 'рак', 'форель']

_____________Агрегирующие методы для списков

temp_new = [19.8, 15.3, 18.4, 10.4, 8.1, 5.0]
sum(temp_new)

77.0

Среднее арифметическое
temp_new = [19.8, 15.3, 18.4, 10.4, 8.1, 5.0]
sum(temp_new)/len(temp_new)

12.833333333333334

temp_new = [19.8, 15.3, 18.4, 10.4, 8.1, 5.0]
min(temp_new)

5.0

Элементом списка может быть любой объект в питоне, в том числе и другой список. 
Порой встречаются такие структуры как списки в списках, или "вложенный список".

array_of_arrays = [
                   [1, 2, 3],
                   [4, 5, 3],
                   [7, 2, 5]
                   ]
# у нас есть список array_of_arrays, который состоит из трех элементов 
# мы можем получить каждый из этих трех элементов с помощью индекса
array_of_arrays[1][2]

3

Cоздайте матрицу 3х3 у которой на диагонали будут стоять значение корня из 2
array = [
         [0]*3,
         [0]*3 ,
         [0]*3
         ]
print(array)
array[0][0] = 2**0.5
array[1][1] = 2**0.5
array[2][2] = 2**0.5
array

[[0, 0, 0], [0, 0, 0], [0, 0, 0]]
[[1.4142135623730951, 0, 0],
 [0, 1.4142135623730951, 0],
 [0, 0, 1.4142135623730951]]







ВАЖНО: МЕТОД- ОН ОБРАЩАЕТСЯ К САМОМУ ОБЪЕКТУ (ЧЕРЕЗ ТОЧКУ), ВКЛЮЧАЯ (ЗАСТАВЛЯЯ ДЕЛАТЬ) ОДНУ ИЗ ЕГО ФУНКЦИЙ. МЕТОДЫ НИЧЕГО НЕ ВОЗВРАЩАЮТ!!!
ФУНКЦИЯ - В НЕЕ МЫ ПОМЕЩАЕМ САМ ОБЪЕКТ И С НИМ ЧТО-ТО ДЕЛАЕМ.


4. Словарь

Словарь в Python - неупорядоченная ассоциативная изменяемая коллекция произвольных типов. Снова разбираем по словам:

Неупорядоченная структура означает, что элементы в словаре хранятся в произвольном порядке и не имеют номера
В отличие от последовательностей, которые индексируются диапазоном чисел, словари индексируются по ключам, которые могут быть любым неизменяемым типом; строки и числа всегда могут быть ключами.
Изменяемая - словари можно изменять: добавлять, удалять и заменять элементы и ключи
Произвольных типов означает, что в словаре, как и в списке хранятся элементы любой природы: числа, строки, списки, словари и.т.д.

Создание словарей из двух списков можно осуществить с помощью функции zip:

fruits = ['Банан', 'Яблоко', 'Персик', 'Манго', 'Апельсин']
prices = ['16 рублей','28 рублей','37 рублей','100 рублей','30 рублей']
fruit_dict = dict(zip(fruits, prices))
fruit_dict


{'Банан': '16 рублей',
 'Манго': '100 рублей',
 'Персик': '37 рублей',
 'Яблоко': '28 рублей'}

#Обращаемся к элементу с помощью ключа
print(fruit_dict['Банан'])
print(fruit_dict['Апельсин'])

16 рублей
30 рублей

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
fruit_dict['Вишня']

---------------------------------------------------------------------------
KeyError                                  Traceback (most recent call last)
<ipython-input-79-fbf2fb41c159> in <module>()
----> 1 fruit_dict['Вишня']

KeyError: 'Вишня'


--------------------------------------------------------------------------
if 'Банан' not in fruit_dict: 
    print('Нет в словаре') 
else: 
    print(fruit_dict['Банан'])
--------------------------------------------------------------------------

16 рублей

----------------------------------------------------------------------------------------------------------------------------------------------------
Получить ключи и значения словарей можно с помощью методов: keys(), values() и items():
----------------------------------------------------------------------------------------------------------------------------------------------------

user_dict = {
    'id': 532, 
    'name': 'Ксения',
    'surmame': 'Собчак',
    'age': 40,
    'gender': 'female',
    'mail': 'sobchak@yandex.ru',
    'count_orders': 1402
}
--------------------------------------------------------------------------
Получение значений:
items = list(user_dict.values())
items

[532, 'Ксения', 'Собчак', 40, 'female', 'sobchak@yandex.ru', 1402]
--------------------------------------------------------------------------
Получение кейсов:
features = list(user_dict.keys())
features

['id', 'name', 'surmame', 'age', 'gender', 'mail', 'count_orders']
--------------------------------------------------------------------------
Получение кортежей:
features_items = list(user_dict.items())
features_items

[('id', 532),
 ('name', 'Ксения'),
 ('surmame', 'Собчак'),
 ('age', 40),
 ('gender', 'female'),
 ('mail', 'sobchak@yandex.ru'),
 ('count_orders', 1402)]
--------------------------------------------------------------------------

